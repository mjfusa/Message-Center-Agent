name: Create Entra App Registration

on:
  workflow_dispatch:
    inputs:
      displayName:
        description: 'App registration display name'
        required: true
        default: 'MessageCenterAgent-reg'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - development
          - staging
          - production

permissions:
  id-token: write
  contents: read
  
jobs:
  create-app-registration:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Azure login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true
      
      - name: Create app registration
        id: create-app
        run: |
          echo "Checking if app registration already exists..."
          # Check if app registration with the given display name already exists
          APP_EXISTS=$(az ad app list --display-name "${{ github.event.inputs.displayName }}" --query "[?displayName=='${{ github.event.inputs.displayName }}'].appId" -o tsv)
          echo "$APP_EXISTS"
          if: [ -n "$APP_EXISTS" ]; then
            echo "App registration already exists with ID: $APP_EXISTS"
            echo "APP_ID=$APP_EXISTS" >> $GITHUB_ENV
            echo "Skipping creation of new app registration."
            exit 0
          fi
          
          echo "Creating new app registration..."
          
          # Create app registration with required parameters
          az ad app create \
            --display-name "${{ github.event.inputs.displayName }}" \
            --sign-in-audience "AzureADMyOrg" \
            --web-redirect-uris "https://teams.microsoft.com/api/platform/v1.0/oAuthRedirect" "https://teams.microsoft.com/api/platform/v1.0/oAuthConsentRedirect" \
            --enable-id-token-issuance false \
            --enable-access-token-issuance false \
            --identifier-uris "" \
            --output json > app_details.json
          
          echo "App registration created successfully"
          
          # Store the app object ID and app ID for later use
          APP_OBJECT_ID=$(cat app_details.json | jq -r '.id')
          APP_ID=$(cat app_details.json | jq -r '.appId')
          echo "APP_OBJECT_ID=$APP_OBJECT_ID" >> $GITHUB_ENV
          echo "APP_ID=$APP_ID" >> $GITHUB_ENV
          echo "New App ID: $APP_ID"
      
      - name: Add API permissions
        run: |
          # Wait a moment for app registration to propagate
          sleep 10
          
          # Add Microsoft Graph API permissions
          echo "Adding API permissions..."
          az ad app permission add \
            --id "${{ env.APP_OBJECT_ID }}" \
            --api 00000003-0000-0000-c000-000000000000 \
            --api-permissions "eda39fa6-f8cf-4c3c-a909-432c683e4c9b=Scope" \
            --only-show-errors
            
          az ad app permission add \
            --id "${{ env.APP_OBJECT_ID }}" \
            --api 00000003-0000-0000-c000-000000000000 \
            --api-permissions "e1fe6dd8-ba31-4d61-89e7-88639da4683d=Scope" \
            --only-show-errors
            
          # Grant admin consent for API permissions
          echo "Granting admin consent for API permissions..."
          az ad app permission admin-consent --id "${{ env.APP_OBJECT_ID }}"
      
      - name: Create app secrets
        run: |
          # Create password credential with 6 months validity
          END_DATE=$(date -d "+6 months" '+%Y-%m-%dT%H:%M:%SZ')
          
          # Create new password credential with display name
          echo "Creating app secret..."
          CREDENTIAL=$(az ad app credential reset \
            --id "${{ env.APP_OBJECT_ID }}" \
            --display-name "Initial secret created by GitHub Actions on $(date '+%Y-%m-%d')" \
            --end-date "$END_DATE" \
            --append \
            --query "password" -o tsv)
          
          # Mask the secret in logs and store as GitHub output
          echo "::add-mask::$CREDENTIAL"
          echo "APP_SECRET=$CREDENTIAL" >> $GITHUB_ENV
          echo "App credential created with expiration date: $END_DATE"
          
          # Store key information in output file for reference
          echo "App ID: ${{ env.APP_ID }}" >> app_info.txt
          echo "Secret expiration: $END_DATE" >> app_info.txt
          echo "Secret hint: ${CREDENTIAL:0:2}..." >> app_info.txt

      - name: Store secret in Azure Key Vault
        if: github.event.inputs.environment == 'production'
        run: |
          # Generate a Key Vault name based on input (with lowercase and trimmed to fit length limits)
          KV_NAME_BASE=$(echo "${{ github.event.inputs.displayName }}" | tr '[:upper:]' '[:lower:]' | tr -d '-' | tr -d '_')
          VAULT_NAME="${KV_NAME_BASE}kv"
          RG_NAME="app-registrations-rg"
          
          # Check if resource group exists, create if it doesn't
          if ! az group show --name "$RG_NAME" &>/dev/null; then
            echo "Creating resource group $RG_NAME..."
            az group create --name "$RG_NAME" --location "eastus"
          fi
          
          # Check if Key Vault exists, create if it doesn't
          if ! az keyvault show --name "$VAULT_NAME" --resource-group "$RG_NAME" &>/dev/null; then
            echo "Creating Key Vault $VAULT_NAME..."
            az keyvault create \
              --name "$VAULT_NAME" \
              --resource-group "$RG_NAME" \
              --location "eastus" \
              --enable-rbac-authorization true \
              --enabled-for-deployment true \
              --enabled-for-disk-encryption true \
              --enabled-for-template-deployment true \
              --sku standard
              
            # Add current user as Key Vault Administrator
            CURRENT_USER_OID=$(az ad signed-in-user show --query id -o tsv)
            az role assignment create \
              --role "Key Vault Administrator" \
              --assignee "$CURRENT_USER_OID" \
              --scope $(az keyvault show --name "$VAULT_NAME" --resource-group "$RG_NAME" --query id -o tsv)
          fi
              
          # Store the credential in Key Vault with 6 month expiration
          az keyvault secret set \
            --vault-name "$VAULT_NAME" \
            --name "${{ github.event.inputs.displayName }}-secret" \
            --value "${{ env.APP_SECRET }}" \
            --expires "$END_DATE"
              
          echo "Secret stored in Azure Key Vault: $VAULT_NAME"
          echo "Key Vault: $VAULT_NAME" >> app_info.txt
            
      - name: Upload app info as artifact
        uses: actions/upload-artifact@main
        with:
          name: app-registration-info
          path: app_info.txt
          retention-days: 7
          
      - name: Update environment configuration
        run: |
          # Create or update .env file with the app details
          ENV_FILE="env/.env.${{ github.event.inputs.environment }}"
          
          # Create directory if it doesn't exist
          mkdir -p $(dirname "$ENV_FILE")
          
          # Create or update environment file
          cat > "$ENV_FILE" << EOL
          # This file includes environment variables for the ${{ github.event.inputs.environment }} environment.
          
          # Built-in environment variables
          TEAMSFX_ENV=${{ github.event.inputs.environment }}
          APP_NAME_SUFFIX=
          
          # App registration details
          AZURE_CLIENT_ID=${{ env.APP_ID }}
          TEAMS_APP_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
          OAUTH2_REGISTRATION_ID=ZDNkNjg3MmEtMGU4MS00ODBmLTg4ZTQtOGU2MjVlZTQ0N2JhIyNhYTE4YWE4MC02OTAwLTQzMGItYmY1Mi02NzMxZDM4YWNhNGE=
          
          # Generated during provision, others will be added during the Teams app publishing process
          # M365_TITLE_ID=
          # M365_APP_ID=
          # TEAMS_APP_ID=
          # TEAMS_APP_PUBLISHED_APP_ID=
          EOL
          
          echo "Environment file updated successfully at $ENV_FILE"

      - name: Create Azure AD Enterprise Application
        run: |
          # Create service principal for the app (Enterprise Application)
          az ad sp create --id "${{ env.APP_ID }}"
          echo "Enterprise Application created successfully"
          
          # Output application details for reference
          echo "==================== APPLICATION DETAILS ===================="
          echo "App Registration Name: ${{ github.event.inputs.displayName }}"
          echo "Application (client) ID: ${{ env.APP_ID }}"
          echo "Directory (tenant) ID: ${{ secrets.AZURE_TENANT_ID }}"
          echo "Secret Expiration: $END_DATE"
          echo "=========================================================="
